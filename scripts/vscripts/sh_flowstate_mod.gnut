// ███████╗██╗      ██████╗ ██╗    ██╗███████╗████████╗ █████╗ ████████╗███████╗    ███╗   ███╗ ██████╗ ██████╗        
// ██╔════╝██║     ██╔═══██╗██║    ██║██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██╔════╝    ████╗ ████║██╔═══██╗██╔══██╗       
// █████╗  ██║     ██║   ██║██║ █╗ ██║███████╗   ██║   ███████║   ██║   █████╗      ██╔████╔██║██║   ██║██║  ██║       
// ██╔══╝  ██║     ██║   ██║██║███╗██║╚════██║   ██║   ██╔══██║   ██║   ██╔══╝      ██║╚██╔╝██║██║   ██║██║  ██║       
// ██║     ███████╗╚██████╔╝╚███╔███╔╝███████║   ██║   ██║  ██║   ██║   ███████╗    ██║ ╚═╝ ██║╚██████╔╝██████╔╝       
// ╚═╝     ╚══════╝ ╚═════╝  ╚══╝╚══╝ ╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚═╝     ╚═╝ ╚═════╝ ╚═════╝        
                                                                                                                    
// ███╗   ███╗ █████╗ ██████╗ ███████╗    ██████╗ ██╗   ██╗     ██████╗ █████╗ ███████╗███████╗███████╗██████╗ ███████╗
// ████╗ ████║██╔══██╗██╔══██╗██╔════╝    ██╔══██╗╚██╗ ██╔╝    ██╔════╝██╔══██╗██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝
// ██╔████╔██║███████║██║  ██║█████╗      ██████╔╝ ╚████╔╝     ██║     ███████║█████╗  █████╗  █████╗  ██████╔╝███████╗
// ██║╚██╔╝██║██╔══██║██║  ██║██╔══╝      ██╔══██╗  ╚██╔╝      ██║     ██╔══██║██╔══╝  ██╔══╝  ██╔══╝  ██╔═══╝ ╚════██║
// ██║ ╚═╝ ██║██║  ██║██████╔╝███████╗    ██████╔╝   ██║       ╚██████╗██║  ██║██║     ███████╗██║     ██║     ███████║
// ╚═╝     ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝    ╚═════╝    ╚═╝        ╚═════╝╚═╝  ╚═╝╚═╝     ╚══════╝╚═╝     ╚═╝     ╚══════╝

#if UI
untyped // Required to be able to load menus

global function UICodeCallback_Flowstate_ModInit
global function FS_SupportCafe
global function OpenRecordingsMenu
#endif

#if SERVER
global function CodeCallback_Flowstate_ModInit

global function DEV_GetPropAtCrosshair

global function GetCommunityHeirlooms
global function FS_InitCommunityHeirlooms
global function CreateHeirloom
#endif

#if CLIENT
global function ClientCodeCallback_Flowstate_ModInit

global function TestExternalRemoteFunct
#endif

global const array<string> InvalidModesForTrackScoreBoard =
[
	SURVIVAL,
	MENUFALL,
	CUSTOM_CTF,
	TEAM_DEATHMATCH,
	fs_prophunt,
	fs_duckhunt,
	fs_infected	,
]

global struct Heirloom
{
	string melee
	string primary
}

struct
{
	#if SERVER
	array<Heirloom> heirlooms
	#endif
} file

// Gamemodes, Remote Functions and Weapons init
// This has to be executed by Server, Client and UI VM
void function RegisterFlowstateGamemodes()
{
	// DM
	RegisterGamemode( 
		"fs_dm",           // gamemode name
		"Flowstate",              // mod name
		"FS DM",           // display name
		"Deathmatch related modes", // description
		true,						// use custom scoreboard columns, if false it will add kills/deaths
		"Sh_CustomTDM_Init",   // shared init function name (optional)
		"_CustomTDM_Init",   // server init function name (optional)
		"Cl_CustomTDM_Init"    // client init function name (optional)
	)
	
	GameMode_AddScoreboardColumnData( "fs_dm", "#SCOREBOARD_KILLS", PGS_PILOT_KILLS, 2 )
	
	#if !UI
	if( Playlist() == ePlaylists.fs_lgduels_1v1 )
		GameMode_AddScoreboardColumnData( "fs_dm", "Accuracy", PGS_DEATHS, 3 )
	else if( Playlist() == ePlaylists.fs_scenarios )
		GameMode_AddScoreboardColumnData( "fs_dm", "Wins", PGS_DEATHS, 2 )
	else
		GameMode_AddScoreboardColumnData( "fs_dm", "#SCOREBOARD_DEATHS", PGS_DEATHS, 2 )
	#endif

	#if !UI
		if( Playlist() == ePlaylists.fs_dm_oddball || Playlist() == ePlaylists.fs_haloMod_oddball )
			GameMode_AddScoreboardColumnData( "fs_dm", "Oddball Score", PGS_ASSISTS, 5 )
		else if( Playlist() == ePlaylists.fs_scenarios )
			GameMode_AddScoreboardColumnData( "fs_dm", "Score", PGS_ASSISTS, 3 )
		else
			GameMode_AddScoreboardColumnData( "fs_dm", "Damage", PGS_ASSISTS, 5 )
		
		GameMode_AddScoreboardColumnData( "fs_dm", "Latency", PGS_ASSISTS, 3 )
	#endif
	
	// AIMTRAINER
	RegisterGamemode( 
		"fs_aimtrainer",           // gamemode name
		"Flowstate",              // mod name
		"FS AimTrainer",           // display name
		"Apex Aim Trainer mode", // description
		false,						// use custom scoreboard columns, if false it will add kills/deaths
		"Sh_ChallengesByColombia_Init",   // shared init function name (optional)
		"_ChallengesByColombia_Init",   // server init function name (optional)
		"Cl_ChallengesByColombia_Init"    // client init function name (optional)
	)
	
	// PROPHUNT
	RegisterGamemode( 
		"fs_prophunt",           // gamemode name
		"Flowstate",              // mod name
		"FS Prophunt",           // display name
		"Apex Prophunt mode", // description
		false,						// use custom scoreboard columns, if false it will add kills/deaths
		"GamemodeProphuntShared_Init",   // shared init function name (optional)
		"_GamemodeProphunt_Init",   // server init function name (optional)
		"ClGamemodeProphunt_Init"    // client init function name (optional)
	)

	// INFECTED
	RegisterGamemode( 
		"fs_infected",           // gamemode name
		"Flowstate",              // mod name
		"FS Infected",           // display name
		"Apex Infected mode", // description
		false,						// use custom scoreboard columns, if false it will add kills/deaths
		"Sh_GamemodeInfection_Init",   // shared init function name (optional)
		"_GamemodeInfection_Init",   // server init function name (optional)
		"Cl_GamemodeInfection_Init"    // client init function name (optional)
	)

	// SND
	RegisterGamemode( 
		"fs_snd",           // gamemode name
		"Flowstate",              // mod name
		"FS SND",           // display name
		"Apex Search & Destroy mode", // description
		true,						// use custom scoreboard columns, if false it will add kills/deaths
		"Sh_GamemodeSND_Init",   // shared init function name (optional)
		"_GamemodeSND_Init",   // server init function name (optional)
		"Cl_GamemodeSND_Init"    // client init function name (optional)
	)
	
	GameMode_AddScoreboardColumnData( "fs_snd", "#SCOREBOARD_KILLS", PGS_PILOT_KILLS, 2 )
	GameMode_AddScoreboardColumnData( "fs_snd", "Planted", PGS_DEATHS, 2 )
	
	#if !UI
		GameMode_AddScoreboardColumnData( "fs_snd", "Defused", PGS_ASSISTS, 2 )
		GameMode_AddScoreboardColumnData( "fs_snd", "Latency", PGS_ASSISTS, 2 )
	#endif

	// DUCKHUNT
	RegisterGamemode( 
		"fs_duckhunt",           // gamemode name
		"Flowstate",              // mod name
		"FS Duckhunt",           // display name
		"Apex Duckhunt mode", // description
		false,						// use custom scoreboard columns, if false it will add kills/deaths
		"GamemodeSurvivalShared_Init",   // shared init function name (optional)
		"_GamemodeDuckhunt_Init",   // server init function name (optional)
		"Cl_GamemodeDuckhunt_Init"    // client init function name (optional)
	)

	// PK KNOCKBACKS
	RegisterGamemode( 
		"fs_pkknockback",           // gamemode name
		"Flowstate",              // mod name
		"FS PkKnockbacks",           // display name
		"Apex PkKnockbacks mode", // description
		false,						// use custom scoreboard columns, if false it will add kills/deaths
		"GamemodeSurvivalShared_Init",   // shared init function name (optional)
		"_GamemodePkknockback_Init",   // server init function name (optional)
		"Cl_GamemodePkknockback_Init"    // client init function name (optional)
	)

	// FS SPIES VS MERCS
	RegisterGamemode( 
		"fs_spieslegends",           // gamemode name
		"Flowstate",              // mod name
		"FS Spies vs Mercs",           // display name
		"Apex Spies vs Mercs mode", // description
		false,						// use custom scoreboard columns, if false it will add kills/deaths
		"Sh_GamemodeSpiesLegends_Init",   // shared init function name (optional)
		"_GamemodeSpiesLegends_Init",   // server init function name (optional)
		"Cl_GamemodeSpiesLegends_Init"    // client init function name (optional)
	)

	// FS APEX KARTS
	// RegisterGamemode( 
		// "fs_apexkart",           // gamemode name
		// "Flowstate",              // mod name
		// "FS Karts",           // display name
		// "Apex Karts mode", // description
		// false,						// use custom scoreboard columns, if false it will add kills/deaths
		// "GamemodeSurvivalShared_Init",   // shared init function name (optional)
		// "_FS_Carritos_Init",   // server init function name (optional)
		// "Cl_FS_Carritos_Init"    // client init function name (optional)
	// )
}

#if SERVER || CLIENT
void function RegisterFlowstateRemoteFunctions()
{
	// #if DEVELOPER
		// if( Playlist() != ePlaylists.fs_scenarios )
			// DEV_RegisterNetworking_SpawnSystem() //Audit 2-22-2025
	// #endif

	// Use this to register all remote functions used in Flowstate Modes
	ScriptRemote_RegisterUIFunction("FS_SupportCafe")

	// Fade REVISIT
	ScriptRemote_RegisterClientFunction( "ServerCallback_SonarPhaseChamber", "entity", "entity", "float", 0.0, 120.0, 16 )

	// Lightning Gun
	ScriptRemote_RegisterClientFunction( "ServerCallback_CreatesLaserFXFromServer", "entity", "vector", -1.0, 66000.0, 32, "vector", -32000.0, 32000.0, 32 )

	// R5R Sword, (cafe) revisit, only register if "titansword" is precached and enabled
	// ScriptRegisterNetworkedVariable( "isPlayerBlocking", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	
	// if( Playlist() != ePlaylists.fs_scenarios )
		// ScriptRegisterNetworkedVariable( "TitanSwordSuper", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, -2.0 )//temp change. need a SNVT_TIME SNDC_PLAYER_EXCLUSIVE slot for scenarios. Cafe
	
	// ScriptRemote_RegisterClientFunction( "ServerCallback_TitanSword_SuperReady", "entity" )
	// ScriptRemote_RegisterClientFunction( "ServerCallback_StopDash" )
	// ScriptRemote_RegisterClientFunction( "FS_TitanSword_CreateSlamGroundFx", "vector", -32000.0, 32000.0, 32 )

	// Ringflare
	ScriptRemote_RegisterClientFunction( "EnterTriggerRF", "entity" )
	ScriptRemote_RegisterClientFunction( "ExitTriggerRF", "entity" )
	
	//Custom HoloSpray
	ScriptRemote_RegisterClientFunction( "HoloSpray_OnUse", "int", EHANDLE_MIN, EHANDLE_MAX, "int", 0, 256 ) //Audit 2-22-2025
	
	//Audio Visual Clues
	ScriptRemote_RegisterClientFunction( "ServerCallback_AddGunfireEvent", "entity", "vector", -32000.0, 32000.0, 32 )
	
	ScriptRegisterNetworkedVariable( "isPlayerShootingFlowstateLightningGun", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	
	ScriptRegisterNetworkedVariable( "FS_PlayerIsMnk", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
	
	//Cafe
	//Remote functions _ByRef
	//To be used with Remote_CallFunction_ByRef( entity player, string funcName )
	//Test it with script Remote_CallFunction_ByRef( gp()[0], "TestExternalRemoteFunct" )
	//These don't change checksum
	array<string> RemoteFunctions_ByRef = [
		"TestExternalRemoteFunct"
	]
	
	RegisterExternalRemoteFunction_ByRef_Array( RemoteFunctions_ByRef, "Flowstate" )
	
	if( Playlist() == ePlaylists.fs_scenarios )
	{
		ScriptRegisterNetworkedVariable( "characterSelectionReady", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
		ScriptRegisterNetworkedVariable( "characterSelectLockstepIndex", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, -1 )
		ScriptRegisterNetworkedVariable( "characterSelectLockstepStartTime", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "characterSelectLockstepEndTime", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "pickLoadoutGamestateEndTime", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, -1 )
		ScriptRegisterNetworkedVariable( "pickLoadoutGamestateStartTime", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME, -1 )
	}
	
	if( Gamemode() == eGamemodes.fs_snd )
	{
		// ScriptRegisterNetworkedVariable( "money", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
		ScriptRegisterNetworkedVariable( "planted", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
		ScriptRegisterNetworkedVariable( "defused", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
		ScriptRegisterNetworkedVariable( "playerStamina", SNDC_PLAYER_EXCLUSIVE, SNVT_INT, 100 )
		ScriptRegisterNetworkedVariable( "playerStaminaRecovering", SNDC_PLAYER_EXCLUSIVE, SNVT_BOOL, false )
	} 
	
	if( Flowstate_IsHaloMode() )
		ScriptRegisterNetworkedVariable( "fs_haloMod_assignedMasterChief", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )

	if( GetCurrentPlaylistVarBool( "is_halo_gamemode", false ) )
	{
		ScriptRemote_RegisterClientFunction( "FS_ForceDestroyCustomAdsOverlay" )
		ScriptRemote_RegisterClientFunction( "FS_ForceAdjustSunFlareParticleOnClient", "int", 0, 50 ) 
		ScriptRemote_RegisterClientFunction( "FSHaloMod_CreateKillStreakAnnouncement", "int", 0, 50 ) 
	}
	
	//Dynamic client side lights spawn from server
	//if( MapName() == eMaps.mp_rr_arena_composite ) //TEMP. To free up buffer space. Currently only used in composite. Cafe
		//ScriptRemote_RegisterClientFunction( "ServerCallback_SpawnOrModifyClientSideDynamicLight", "vector", -32000.0, 32000.0, 32, "vector", -32000.0, 32000.0, 32, "int", 0, 10, "float", 0.0, 32000.0, 12, "float", 0.0, 32000.0, 12 )
	
	//Custom box msg from server //Reenabled to use Message_New function in dev modes.
	ScriptRemote_RegisterUntypedFunction_deprecated( "fs_NewBoxBuildMessage" )
	ScriptRemote_RegisterUntypedFunction_deprecated( "fs_NewBoxShowMessage" )
		

	//Update rainbow extra property
	//Add back if I add again level 7 (rainbow) body shield
	// ScriptRemote_RegisterClientFunction( "Flowstate_UpdateRainbowShieldExtraProperty", "int", EHANDLE_MIN, EHANDLE_MAX, "int", 0, 5000 )//Audit 2-22-2025

	//Evo shield mod
	if( GetCurrentPlaylistVarBool( "flowstate_evo_shields", false ) )
		ScriptRemote_RegisterClientFunction( "EvoShield_PlayFX", "int", 0, 10 )
	
	// Falling Forever Custom Timer
	if( Playlist() == ePlaylists.fs_fallingforever )
		ScriptRemote_RegisterClientFunction( "ServerCallback_SetTimer", "int", 0, 4001 ) //66 mins
	
	if( Playlist() == ePlaylists.fs_movementrecorder )
	{
		ScriptRemote_RegisterClientFunction( "FS_MovementRecorder_UpdateHints", "int", 0, 21, "bool", "float", -1.0, FLT_MAX, 16 )
		ScriptRemote_RegisterClientFunction( "FS_MovementRecorder_CreateInputHintsRUI", "bool" )
	}
	
	//Gamemodes remote functions
	switch ( Gamemode() )
	{
		case eGamemodes.fs_spieslegends:
			Remote_RegisterClientFunction( "FS_Spies_Center_Msg", "int", -1, 8, "int", -1, 15, "int", -1, 99, "int", INT_MIN, INT_MAX )
			Remote_RegisterClientFunction( "ServerToClient_UpdateHackingHUD", "float", 0.0, 1.1, 8, "int", 0, 6,"int", EHANDLE_MIN, EHANDLE_MAX, "int", -1, 4 )
			Remote_RegisterClientFunction( "ServerToClient_RoundWinnerScreen", "int", 1, 4, "int", 1, 4 )
			Remote_RegisterClientFunction( "ServerToClient_UpdateScoreHUD", "int", -1, 4, "int", 0, 4 )
			
			RegisterNetworkedVariable( "FS_SpiesRoundEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			RegisterNetworkedVariable( "FS_SpiesRoundNumber", SNDC_GLOBAL, SNVT_INT, -1 )
			RegisterNetworkedVariable( "FS_SpyTeam", SNDC_GLOBAL, SNVT_INT, -1 )
			RegisterNetworkedVariable( "FS_SpiesTerminalsHacked", SNDC_GLOBAL, SNVT_INT, -1 )
			
			RegisterNetworkedVariable( "FS_SpiesIsRoundExtended", SNDC_GLOBAL, SNVT_BOOL, false )

			ScriptRemote_RegisterUIFunction("Open_FSSND_BuyMenu", "float", -1.0, 99999.0, 32 )
			ScriptRemote_RegisterUIFunction("SND_UpdateVotesForTeam", "int", 0, 4, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterUIFunction("SND_UpdateMaxVotesForTeam", "int", 0, 4, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterUIFunction("Close_FSSND_BuyMenu")
			ScriptRemote_RegisterUIFunction("SND_Disable_IMCButton")
			ScriptRemote_RegisterUIFunction("SND_Disable_MILITIAButton")
			
			ScriptRemote_RegisterUIFunction( "GadgetsSelector_Open", "int", 0, 2 )
			ScriptRemote_RegisterUIFunction( "GadgetsSelector_Close" )
			
			ScriptRemote_RegisterClientFunction( "ServerCallback_SpawnOrModifyClientSideDynamicLight", "vector", -32000.0, 32000.0, 32, "vector", -32000.0, 32000.0, 32, "int", 0, 10, "float", 0.0, 32000.0, 12, "float", 0.0, 32000.0, 12, "int", 0, 100 )
		break
		
		case eGamemodes.fs_dm:
			
			if( Playlist() == ePlaylists.fs_scenarios )
			{
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_ChangeAliveStateForPlayer", "entity", "bool" )//Audit 2-22-2025
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_TogglePlayersCardsVisibility", "bool", "bool" )
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_SetupPlayersCards", "bool" )
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_OnRingCreated", "entity" )
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_SetRingCloseTimeForMinimap", "int", -1, 5000 )//Audit 2-22-2025
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_ForceUpdatePlayerCount", "entity" )
				
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_AddEnemyHandle", "entity" )//Audit 2-22-2025
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_AddEnemyHandle2", "entity" )//Audit 2-22-2025
				ScriptRemote_RegisterClientFunction( "FS_Scenarios_AddAllyHandle", "entity" )//Audit 2-22-2025
				ScriptRemote_RegisterClientFunction( "Flowstate_ShowMatchFoundUI", "int", -2, 1200 )

				ScriptRegisterNetworkedVariable( "FS_Scenarios_MatchesWins", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
				ScriptRegisterNetworkedVariable( "FS_Scenarios_PlayerScore", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0 )
				ScriptRegisterNetworkedVariable( "FS_Scenarios_currentDeathfieldRadius", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME )
				ScriptRegisterNetworkedVariable( "FS_Scenarios_currentDistanceFromCenter", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME )
				ScriptRegisterNetworkedVariable( "FS_Scenarios_gameStartTime", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME )
				ScriptRegisterNetworkedVariable( "FS_Scenarios_timePlayerEnteredInLobby", SNDC_PLAYER_EXCLUSIVE, SNVT_TIME )
			
				ScriptRegisterNetworkedVariable( "FS_1v1_PlayerState", SNDC_PLAYER_EXCLUSIVE, SNVT_INT )
				Scenarios_RegisterNetworking() //(mk)
			}
			
			if( Playlist() == ePlaylists.fs_lgduels_1v1 )
			{
				ScriptRegisterNetworkedVariable( "accuracy", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )
				
				//offset, r, g, b | enemy offset, r, g, b (mk)
				ScriptRemote_RegisterClientFunction( "ServerCallback_SetLGDuelPesistenceSettings", "float", -999999.0, 999999.0, 32, "int", -1, 256, "int", -1, 256, "int", -1, 256, "float", -999999.0, 999999.0, 32, "int", -1, 256, "int", -1, 256, "int", -1, 256 ) //Audit 2-22-2025
			}
			
			if( Playlist() == ePlaylists.fs_dm_fast_instagib )
				ScriptRegisterNetworkedVariable( "lastLightningGunShotTime", SNDC_PLAYER_GLOBAL, SNVT_TIME, -1 )
			
			if( Playlist() == ePlaylists.fs_1v1_coaching )
			{
				ScriptRemote_RegisterClientFunction( "Flowstate_OpenCoachingMenu" )
				ScriptRemote_RegisterClientFunction( "Flowstate_CloseCoachingMenu" )
				ScriptRemote_RegisterClientFunction( "Flowstate_AddRecordingIdentifierToClient", "int", INT_MIN, INT_MAX, "float", 0.0, 999999.0, 32, "float", 0.0, 999999.0, 32, "int", INT_MIN, INT_MAX ) //todo ranges
				ScriptRemote_RegisterUIFunction( "ClearRecordings" )
				
				RegisterNetworkedVariable( "FS_Coaching_IsPlayingRecording", SNDC_GLOBAL, SNVT_BOOL, false )
			}
			
			ScriptRegisterNetworkedVariable( "championDisplayEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "flowstate_DMStartTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "flowstate_DMRoundEndTime", SNDC_GLOBAL, SNVT_TIME, -1 )
			ScriptRegisterNetworkedVariable( "FSDM_GameState", SNDC_GLOBAL, SNVT_INT, -1 )
			
			if( Playlist() == ePlaylists.fs_1v1 || Playlist() == ePlaylists.fs_vamp_1v1 || Playlist() == ePlaylists.fs_1v1_headshots_only || Playlist() == ePlaylists.fs_lgduels_1v1 || Playlist() == ePlaylists.fs_1v1_coaching )
			{
				ScriptRegisterNetworkedVariable( "FSDM_1v1_Enemy", SNDC_PLAYER_GLOBAL, SNVT_ENTITY )
				ScriptRegisterNetworkedVariable( "FSDM_1v1_PositionInScoreboard", SNDC_PLAYER_GLOBAL, SNVT_INT, -1 )
				ScriptRemote_RegisterClientFunction( "Gamemode1v1_ForceLegendSelector_Deprecated" ) //(mk): Todo clientsided ui activation
				
				ScriptRegisterNetworkedVariable( "FS_1v1_PlayerState", SNDC_PLAYER_EXCLUSIVE, SNVT_INT )

				ScriptRemote_RegisterClientFunction( "ServerCallback_SpawnOrModifyClientSideDynamicLight", "vector", -32000.0, 32000.0, 32, "vector", -32000.0, 32000.0, 32, "int", 0, 10, "float", 0.0, 32000.0, 12, "float", 0.0, 32000.0, 12, "int", 0, 100 )
			}
			
			ScriptRemote_RegisterClientFunction( "DM_HintCatalog", "int", -100, 101, "entity" )//Audit 2-22-2025
			ScriptRemote_RegisterClientFunction( "Flowstate_ShowRespawnTimeUI", "int", -1, 1200 )

			//Movement Gym
			if( FlowState_EnableMovementGym() )
			{
				ScriptRemote_RegisterClientFunction( "Cl_MovementGym_Init" )
				ScriptRemote_RegisterClientFunction( "MG_StopWatch_toggle", "bool" )
				ScriptRemote_RegisterClientFunction( "MG_StopWatch_Obituary", "int", 0, 9999, "entity", "int", 0, 9999 )
				ScriptRemote_RegisterClientFunction( "MG_Checkpoint_Msg" )
				break
			}
			
			//ScriptRemote_RegisterClientFunction( "ServerCallback_ToggleDotForHitscanWeapons", "bool" )	//Audit 2-22-2025 not used
			// ScriptRemote_RegisterClientFunction( "ServerCallback_OpenStatisticsUI" ) //REVISIT //(cafe) Not used - 6-5-2025
			ScriptRemote_RegisterClientFunction( "ServerCallback_FSDM_SetScreen", "int", 0, 256, "int", 0, 9999, "int", 0, 42069, "int", 0, 256 ) //Audit 2-22-2025
			ScriptRemote_RegisterClientFunction( "ServerCallback_FSDM_OpenVotingPhase", "bool" )
			ScriptRemote_RegisterClientFunction( "ServerCallback_FSDM_ChampionScreenHandle", "bool", "int", -9, 128, "int", 0, 1000 ) //Audit 2-22-2025
			ScriptRemote_RegisterClientFunction( "ServerCallback_FSDM_UpdateVotingMaps", "int", 0, 256, "int", 0, 256, "int", 0, 256, "int", 0, 256 )
			ScriptRemote_RegisterClientFunction( "ServerCallback_FSDM_UpdateMapVotesClient", "int", 0, 256, "int", 0, 256, "int", 0, 256, "int", 0, 256 )
			ScriptRemote_RegisterClientFunction( "ServerCallback_CoolCameraOnMenu" )
			ScriptRemote_RegisterClientFunction( "ServerCallback_SendScoreboardToClient", "int", EHANDLE_MIN, EHANDLE_MAX, "int", INT_MIN, INT_MAX, "int", -1, INT_MAX, "float", 0.0, FLT_MAX, 32, "int", 0, INT_MAX, "int", 0, INT_MAX )
			ScriptRemote_RegisterClientFunction( "ServerCallback_ClearScoreboardOnClient" )

			ScriptRemote_RegisterClientFunction( "FSDM_CustomWinnerScreen_Start", "int", -1, 127, "int", 0, 11 ) //Audit 2-22-2025
			
			if( GetCurrentPlaylistVarBool( "enable_oddball_gamemode", false ) )
			{
				ScriptRemote_RegisterClientFunction( "Oddball_HintCatalog", "int", -100, 101, "int", EHANDLE_MIN, EHANDLE_MAX ) //Audit 2-22-2025
				ScriptRegisterNetworkedVariable( "oddball_ballHeldTime", SNDC_PLAYER_GLOBAL, SNVT_BIG_INT, 0 )
				ScriptRemote_RegisterClientFunction( "SetBallPosesionIconOnHud", "int", -2, 2 )
				ScriptRegisterNetworkedVariable( "FSDM_Oddball_BallOrCarrierEntity", SNDC_GLOBAL, SNVT_ENTITY )
			}
			
			break
		
		case eGamemodes.fs_aimtrainer:
			
			BannerAssets_SetEnabled( false )
			
			ScriptRemote_RegisterClientFunction( "AimTrainer_LootRollerDamageRgb", "entity" )
			ScriptRemote_RegisterClientFunction( "AimTrainer_SetPatstrafeHudValues", "float", 0.0, 1010.0, 16, "float", 0.0, 120.0, 16, "float", 0.0, 1010.0, 16, "float", 0.0, 2000.0, 16, "bool" )
			
			ScriptRemote_RegisterUIFunction( "OpenFRChallengesMenu" )
			ScriptRemote_RegisterUIFunction( "CloseFRChallengesMenu" )
			ScriptRemote_RegisterUIFunction( "OpenFRChallengesMainMenu", "int", 0, 999999 )
			ScriptRemote_RegisterUIFunction( "CloseFRChallengesMainMenu")			
			ScriptRemote_RegisterUIFunction( "OpenFRChallengesSettings" )
			ScriptRemote_RegisterUIFunction( "CloseFRChallengesSettings" )		
			ScriptRemote_RegisterUIFunction( "OpenFRChallengesSettingsWpnSelector" )
			ScriptRemote_RegisterUIFunction( "CloseFRChallengesSettingsWpnSelector" )
			ScriptRemote_RegisterClientFunction("ServerCallback_OpenFRChallengesMenu","int", 0, 999999, "int", 0, 999999, "int", 0, 999999, "float", 0.0, 1.0, 32, "int", 0, 999999, "int", 0, 999999, "int", 0, 999999, "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_CloseFRChallengesResults")
			ScriptRemote_RegisterClientFunction("ServerCallback_RestartChallenge", "int", 0, 30)
			ScriptRemote_RegisterClientFunction("ServerCallback_HistoryUIAddNewChallenge", "int", 0, 999999, "int", 0, 999999, "entity", "float", 0.0, 1.0, 32, "int", 0, 999999, "int", 0, 999999, "int", 0, 999999,"int", 0, 999999)
			ScriptRemote_RegisterClientFunction("ServerCallback_OpenFRChallengesMainMenu", "int", 0, 999999 )
			ScriptRemote_RegisterClientFunction("ServerCallback_OpenFRChallengesHistory", "int", 0, 999999 )
			ScriptRemote_RegisterClientFunction("ServerCallback_OpenFRChallengesSettings")
			ScriptRemote_RegisterClientFunction("ServerCallback_CoolCameraOnMenu")
			ScriptRemote_RegisterClientFunction("ServerCallback_SetChallengeActivated", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_LiveStatsUIDummiesKilled", "int", 0, 999999)
			ScriptRemote_RegisterClientFunction("ServerCallback_LiveStatsUIAccuracyViaTotalShots", "int", 0, 999999)
			ScriptRemote_RegisterClientFunction("ServerCallback_LiveStatsUIAccuracyViaShotsHits")
			ScriptRemote_RegisterClientFunction("ServerCallback_LiveStatsUIDamageViaWeaponAttack", "int", 0, 999999, "float", 0.0, 999999.0, 32)
			ScriptRemote_RegisterClientFunction("ServerCallback_LiveStatsUIDamageViaDummieDamaged", "int", 0, 999999)
			ScriptRemote_RegisterClientFunction("ServerCallback_LiveStatsUIHeadshot", "int", 0, 999999)
			ScriptRemote_RegisterClientFunction("ServerCallback_ResetLiveStatsUI")
			ScriptRemote_RegisterClientFunction("ServerCallback_CreateDistanceMarkerForGrenadesChallengeDummies", "entity", "entity")
			//ScriptRemote_RegisterClientFunction("ServerCallback_ToggleDotForHitscanWeapons", "bool") //Audit 2-22-2025 not used
			
			break
		
		case eGamemodes.fs_snd: //(mk): can save 15 slots byRef || save buffer by using entity over encodedEhandle
			
			BannerAssets_SetEnabled( false )
			
			ScriptRemote_RegisterClientFunction("Sh_SetAttackingLocations", "int", 0, 10)
			ScriptRemote_RegisterClientFunction("Sh_SetAttackerTeam", "int", 0, 10, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("SND_HintCatalog", "int", 0, 20, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("SND_HintCatalog_WithEntity", "int", 0, 10, "entity")
			ScriptRemote_RegisterClientFunction("Thread_SNDTimer", "float", 0.0, 999999.0, 32)
			ScriptRemote_RegisterClientFunction("Thread_SNDBuyMenuTimer", "float", 0.0, 999999.0, 32)
			ScriptRemote_RegisterClientFunction("ServerCallback_UpdateSpectatorTargetCount", "int", INT_MIN, INT_MAX, "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_ResetMoney")
			ScriptRemote_RegisterClientFunction("SND_ToggleScoreboardVisibility", "bool")
			ScriptRemote_RegisterClientFunction("SND_UpdateUIScoreOnPlayerConnected", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ServerCallback_ForceDestroyPlantingRUI")
			ScriptRemote_RegisterClientFunction("INFECTION_QuickHint", "int", -25, 255, "bool", "int", INT_MIN, INT_MAX) //For kill streak
			ScriptRemote_RegisterClientFunction("FlowstateSND_CustomBuyMenu_Start", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "bool")
			ScriptRemote_RegisterClientFunction("FlowstateSND_CustomWinnerScreen_Start", "int", INT_MIN, INT_MAX, "int", 0, 10)
			ScriptRemote_RegisterClientFunction("ServerCallback_SetBombState", "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ServerCallback_ToggleBombUIVisibility", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_FlowstateSND_CustomBuyMenu_UpdateValues", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ServerCallback_BuySuccessful", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX  )
			ScriptRemote_RegisterClientFunction("ServerCallback_SellSuccessful", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX  )
			ScriptRemote_RegisterClientFunction("ServerCallback_OnMoneyAdded", "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ServerCallback_AddPlantZoneInGameHintA", "entity", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_AddPlantZoneInGameHintB", "entity", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_OnBombPlantedInGameHint", "entity", "float", 0.0, 999999.0, 32)
			ScriptRemote_RegisterClientFunction("ServerCallback_ForceZoneHintDestroy", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_OpenVotingPhase", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_SetScreen", "int", 0, 255, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_ClearScoreboardOnClient")
			ScriptRemote_RegisterClientFunction("ServerCallback_SendScoreboardToClient", "int", EHANDLE_MIN, EHANDLE_MAX, "int", INT_MIN, INT_MAX, "int", -1, INT_MAX, "float", 0.0, FLT_MAX, 32, "int", 0, INT_MAX, "int", 0, INT_MAX )
			ScriptRemote_RegisterClientFunction("SetSNDKnifeColor", "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("SetCustomLightning", "int", -1, 10)
			ScriptRemote_RegisterClientFunction("ClientCodeCallback_OnPlayerConsumableInventoryChanged", "entity")
			ScriptRemote_RegisterClientFunction("SND_ToggleMoneyUI", "bool")
			ScriptRemote_RegisterUIFunction("Open_FSSND_BuyMenu", "float", -1.0, 99999.0, 32 )
			ScriptRemote_RegisterUIFunction("SND_UpdateVotesForTeam", "int", 0, 2, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterUIFunction("SND_UpdateMaxVotesForTeam", "int", 0, 4, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterUIFunction("Close_FSSND_BuyMenu")
			ScriptRemote_RegisterUIFunction("SND_Disable_IMCButton")
			ScriptRemote_RegisterUIFunction("SND_Disable_MILITIAButton")
			
			break
		
		case eGamemodes.fs_infected:
		
			BannerAssets_SetEnabled( false )
		
			ScriptRegisterNetworkedVariable( "isPlayerShadowForm", SNDC_PLAYER_GLOBAL, SNVT_BOOL, false )
			ScriptRemote_RegisterClientFunction("ApplyInfectedHUD")
			ScriptRemote_RegisterClientFunction("CleanUpInfectedClientEffects")
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_SetScreen", "int", 0, 255, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_OpenVotingPhase", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_ChampionScreenHandle", "bool", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_UpdateVotingMaps", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_UpdateMapVotesClient", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_CoolCameraOnMenu")
			ScriptRemote_RegisterClientFunction("INFECTION_QuickHint", "int", -25, 255, "bool", "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ShowInfectedNearUI", "bool")

			//Evac
			ScriptRemote_RegisterClientFunction( "Infection_CreateEvacCountdown", "int", 0, 255) 
			ScriptRemote_RegisterClientFunction( "Infection_DestroyEvacCountdown" )
			ScriptRemote_RegisterClientFunction( "CreateCoolCameraForCoolDropship", "entity")
			ScriptRemote_RegisterClientFunction( "SignalToDestroyDropshipCamera" )
			ScriptRemote_RegisterClientFunction( "Infection_CreateEvacShipMinimapIcons", "entity")

			//Mystery Box
			ScriptRemote_RegisterClientFunction( "ServerCallback_MysteryBoxPrinttObituary", "entity" )
			ScriptRemote_RegisterClientFunction( "ServerCallback_MysteryBoxIsUsable", "entity", "bool" )
			ScriptRemote_RegisterClientFunction( "ServerCallback_SetWeaponMysteryBoxUsable", "entity")
			ScriptRemote_RegisterClientFunction( "ServerCallback_MysteryBoxChangeLocation_DoAnnouncement" )
			
			break
		
		case eGamemodes.fs_duckhunt:
			ScriptRemote_RegisterClientFunction("DUCKHUNT_CustomHint", "int", 0, 255, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("DUCKHUNT_Timer", "bool", "float", 0.0, 1000000.0, 32)
			ScriptRemote_RegisterClientFunction("ToggleSetHunterClient", "bool")
			
			break
		
		// case eGamemodes.flowstate_pkknockback:
			// ScriptRemote_RegisterClientFunction("UpdateRingSizeFromServer", "float", 0.0, 99999.0, 32)
			// ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_SetScreen", "int", 0, 255, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", 0, 255)
			// ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_OpenVotingPhase", "bool")
			// ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_ChampionScreenHandle", "bool", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
			// ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_UpdateVotingMaps", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			// ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_UpdateMapVotesClient", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			// ScriptRemote_RegisterClientFunction("ServerCallback_CoolCameraOnMenu")
			// ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_CoolCamera")
			// ScriptRemote_RegisterClientFunction("MakeKnockbacksRUI", "int", 0, 255, "int", INT_MIN, INT_MAX)
			// ScriptRemote_RegisterClientFunction("DestroyKnockbacsRUI")
			// ScriptRemote_RegisterClientFunction("PKKNOCKBACK_CustomHint", "int", 0, 255, "int", INT_MIN, INT_MAX)
			
			// ScriptRemote_RegisterClientFunction( "PKKNOCKBACK_PlayerKilled", "int", INT_MIN, INT_MAX, "int", 0, 255, "entity", "int", INT_MIN, INT_MAX, "int", 0, 255, "entity")
			// ScriptRemote_RegisterClientFunction( "PKKNOCKBACK_Timer", "bool", "float", 0.0, 1000000.0, 32)
			// ScriptRemote_RegisterClientFunction( "PKKNOCKBACK_SetUIVisibility", "bool" )
			
			// break
			
		case eGamemodes.fs_prophunt:
		
			BannerAssets_SetEnabled( false )
			
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_SetScreen", "int", 0, 255, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_OpenVotingPhase", "bool")
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_ChampionScreenHandle", "bool", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_UpdateVotingMaps", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_FSDM_UpdateMapVotesClient", "int", 0, 255, "int", 0, 255, "int", 0, 255, "int", 0, 255)
			ScriptRemote_RegisterClientFunction("ServerCallback_CoolCameraOnMenu")
			ScriptRemote_RegisterClientFunction("ServerCallback_SendScoreboardToClient", "int", EHANDLE_MIN, EHANDLE_MAX, "int", INT_MIN, INT_MAX, "int", -1, INT_MAX, "float", 0.0, FLT_MAX, 32, "int", 0, INT_MAX, "int", 0, INT_MAX )
			ScriptRemote_RegisterClientFunction("ServerCallback_SendProphuntPropsScoreboardToClient", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ServerCallback_SendProphuntHuntersScoreboardToClient", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("ServerCallback_ClearScoreboardOnClient")
			ScriptRemote_RegisterClientFunction("PROPHUNT_DoScreenFlashFX", "entity", "entity")
			ScriptRemote_RegisterClientFunction("PROPHUNT_EnableControlsUI", "bool", "float", 0.0, 1000000.0, 32)
			ScriptRemote_RegisterClientFunction("PROPHUNT_RemoveControlsUI")
			ScriptRemote_RegisterClientFunction("PROPHUNT_CustomHint", "int", 0, 255, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("PROPHUNT_AddUsageToHint", "int", 0, 255)
			ScriptRemote_RegisterClientFunction("PROPHUNT_AddWinningSquadData_PropTeamAddModelIndex", "bool", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("PROPHUNT_StartMiscTimer", "bool")
			ScriptRemote_RegisterClientFunction("PROPHUNT_QuickText", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX)
			ScriptRemote_RegisterClientFunction("CreateAndMoveCameraToWinnerProp", "entity")
			ScriptRemote_RegisterClientFunction("PROPHUNT_Disable_MILITIAButton")
			ScriptRemote_RegisterClientFunction("PROPHUNT_Disable_IMCButton")
			ScriptRemote_RegisterClientFunction("ForceDisableHuntersAbilityHint")
			ScriptRemote_RegisterClientFunction("EnableHuntersAbility")
			ScriptRemote_RegisterClientFunction("PROPHUNT_UpdateThirdPersonCameraPosition", "float", 0.0, 9999.0, 32)
			
			break					
	}

	if( BannerAssets_IsEnabled() )
	{
		ScriptRemote_RegisterUntypedFunction_deprecated( "__BuildWorldAssetString" ) //optional, else called by int ref (should be deprecated feature of server asset system)
		
		//(mk): Temporarily moved some to deprecated to save room for typed buffer. 
		ScriptRemote_RegisterClientFunction( "ServerCallback_CreateWorldAsset", "vector", -32000.0, 32000.0, 32, "vector", -32000.0, 32000.0, 32, "float", -1.0, 9999.0, 16, "float", -1.0, 9999.0, 16, "int", -1, 999, "int", -1, 999, "int", -1, 999, "float", -1.0, 1.0, 16, "bool", "float", -1.0, 5000.0, 16 )
		//ScriptRemote_RegisterClientFunction( "ServerCallback_DestroyWorldAsset", "int", -2, 999 )
		//ScriptRemote_RegisterClientFunction( "ServerCallback_SetWorldAssetVisibility", "int", 0, 999, "int", 0, 999, "bool", "bool", "bool", "int", -2, 999, "int", -5, 3, "bool" )
		ScriptRemote_RegisterClientFunction( "ServerCallback_ModifyWorldAsset", "int", -2, 999, "int", -2, 999, "vector", -32000.0, 32000.0, 32, "vector",  -32000.0, 32000.0, 32, "float", -1.0, 9999.0, 16, "float", -1.0, 9999.0, 16, "float", -1.0, 1.0, 16, "int", -1, 999 )
		//ScriptRemote_RegisterClientFunction( "ServerCallback_CreateChannel", "int", -1, 30 )

		//ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_CreateWorldAsset" )
		ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_DestroyWorldAsset" )
		ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_SetWorldAssetVisibility" )
		ScriptRemote_RegisterUntypedFunction_deprecated( "ServerCallback_CreateChannel" )
		//end temp
	}

	
	// Client only remote function stuff, for RegisterNetworkedVariableChangeCallback
	#if CLIENT
		switch ( Gamemode() )
		{
			case eGamemodes.fs_spieslegends:
				CL_Spies_RegisterNetworkFunctions()
			break
			
			case eGamemodes.fs_dm:
				CL_FSDM_RegisterNetworkFunctions()
			break
			
			case eGamemodes.fs_aimtrainer:
				CL_AimTrainer_RegisterNetworkFunctions()
			break
		}
	

		if( GetCurrentPlaylistVarBool( "enable_oddball_gamemode", false ) )
		{
			RegisterNetworkedVariableChangeCallback_ent( "FSDM_Oddball_BallOrCarrierEntity", Oddball_BallOrCarrierEntityChanged )
			// RegisterNetworkedVariableChangeCallback_time( "FSIntro_StartTime", Flowstate_IntroTimeChanged )
			// RegisterNetworkedVariableChangeCallback_time( "FSIntro_EndTime", Flowstate_IntroEndTimeChanged )
			// RegisterNetworkedVariableChangeCallback_time( "FSVoteTeam_EndTime", Flowstate_VoteTeamEndTimeChanged )
			if( Gamemode() == eGamemodes.fs_dm )
				RegisterNetworkedVariableChangeCallback_int( "FSDM_GameState", FSDM_GameStateChanged )		
		}
		
	#endif
}

void function InitFlowstateWeapons()
{
	#if SERVER
	TurretPlasma_Init()
	
	SpawnSystem_Init()
	NotificationSystem_Init()
	Flowstate_Afk_Init()
	PIN_Init_Mkos()
	Chat_Init()
	#endif
	
	WorldDrawAsset_Init()
	
	if( Playlist() == ePlaylists.fs_movementrecorder )
		Sh_FS_MovementRecorder_Init()
	
	MpWeaponRayGun_Init()

	MpUltimatePhaseChamber_Init()
	MpWeaponRingFlare_Init()
	
	if( Playlist() != ePlaylists.fs_1v1 && Playlist() != ePlaylists.fs_lgduels_1v1  && Playlist() != ePlaylists.fs_scenarios )
		MpWeaponEmoteProjector_Init()
	
	MpSpaceElevatorAbility_Init()
	Clickweapon_Init() //Lightning Gun
	
	MpWeaponFlameThrower_Init() //Leaving here for now because it's using kral's asset
	RevShell_Init()
	
	//// Prototipos
	AudioVisualCluesTracker_Init() // Audio Visual Clues
	ShHoverVehicle_Init() // Trident
	TitanFastball_Init() // Titan Fastball
	// MpAbilityPhaseDoor_Init() // Alter Tactical
	// ShHoverBike_Init()
	
	// MpWeaponTitanSword_Init()
	
	
	//// No implementado todavía (26 de junio)
	// MpWeaponNeedler_Init()
	// MpAbilityShadowPounceFree_Init()
	// MpWeaponEnergySword_Init()
	//(cafe) Custom Stuff
	// LobaTacticalTranslocation_LevelInit()
	// MpAbilityAshDash_Init()
	// MpWeaponPortalGun_Init()
	// MpWeaponTitanSword_Init() //Flowstate Sword //Revisit, change model, audit remote functs
	
}
#endif

// ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗     ██╗███╗   ██╗██╗████████╗
// ██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗    ██║████╗  ██║██║╚══██╔══╝
// ███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝    ██║██╔██╗ ██║██║   ██║   
// ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗    ██║██║╚██╗██║██║   ██║   
// ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║    ██║██║ ╚████║██║   ██║   
// ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝    ╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝  

#if SERVER
void function CodeCallback_Flowstate_ModInit()
{
	HAS_FLOWSTATE_MOD = true
	
	ModCallbacks_RegisterBoolCallback("is1v1EnabledAndAllowed", bool function() {
		return is1v1EnabledAndAllowed()
	})
	
	ModCallbacks_RegisterBoolCallback("isScenariosMode", bool function() {
		return isScenariosMode()
	})
	
	ModCallbacks_RegisterIntCallback("GetAttackerTeam", int function() {
		return Sh_GetAttackerTeam()
	})
	
	ModCallbacks_RegisterIntCallback("GetDefenderTeam", int function() {
		return Sh_GetDefenderTeam()
	})
	
	ModCallbacks_RegisterEntityCallback("GetBallCarrier", entity function() {
		return GetBallCarrier()
	})
	
	ModCallbacks_RegisterVoidCallbackWithParams("CreateMovementMapDummieFromMapLoad", void function(array<CallbackParam> params) {
		vector pos = ModCallbacks_GetVectorParam(params, 0)
		vector ang = ModCallbacks_GetVectorParam(params, 1)
		CreateMovementMapDummieFromMapLoad(pos, ang)
	})
	
	ModCallbacks_RegisterVoidCallbackWithParams("FS_Scenarios_SaveLootbinData", void function(array<CallbackParam> params) {
		entity player = ModCallbacks_GetEntityParam(params, 0)
		if (IsValid(player))
			FS_Scenarios_SaveLootbinData(player)
	})
	
	ModCallbacks_RegisterBoolCallbackWithParams("FS_Scenarios_PlayerCanPing", bool function(array<CallbackParam> params) {
		entity player = ModCallbacks_GetEntityParam(params, 0)
		if (IsValid(player))
			return FS_Scenarios_PlayerCanPing(player)
		return true
	})
	
	ModCallbacks_RegisterBoolCallbackWithParams("FS_Spies_IsVictimBackwardsToAttacker", bool function(array<CallbackParam> params) {
		entity attacker = ModCallbacks_GetEntityParam(params, 0)
		entity victim = ModCallbacks_GetEntityParam(params, 1)
		vector position = ModCallbacks_GetVectorParam(params, 2)
		if (IsValid(attacker) && IsValid(victim))
			return FS_Spies_IsVictimBackwardsToAttacker(attacker, victim, position)
		return false
	})
	
	ModCallbacks_RegisterVoidCallbackWithParams("FS_Scenarios_SaveBigDoorData", void function(array<CallbackParam> params) {
		entity door = ModCallbacks_GetEntityParam(params, 0)
		if (IsValid(door))
			FS_Scenarios_SaveBigDoorData(door)
	})
	
	ModCallbacks_RegisterVoidCallbackWithParams("DropLoot_RefScenarios", void function(array<CallbackParam> params) {
		entity player = ModCallbacks_GetEntityParam(params, 0)
		if (IsValid(player))
			DropLoot_RefScenarios(player)
	})
	
	ModCallbacks_RegisterVoidCallbackWithParams("AddToTrackedEnts_RefScenarios", void function(array<CallbackParam> params) {
		entity player = ModCallbacks_GetEntityParam(params, 0)
		entity ent = ModCallbacks_GetEntityParam(params, 1)
		if (IsValid(player) && IsValid(ent))
			AddToTrackedEnts_RefScenarios(player, ent)
	})
	
	FS_InitCommunityHeirlooms() //Load heirlooms array for fsdm file
	
	AddClientCommandCallback( "donatetocafe", ClientCommand_DonateToCafe )
	AddCallback_OnClientConnected( FS_OnClientConnected )
	
	// Gamemodes
	RegisterFlowstateGamemodes()
	
	// Remote functions
	RegisterFlowstateRemoteFunctions()
	
	// Custom Heirlooms
	PrecacheWeapon( $"mp_weapon_vctblue_primary" )
	PrecacheWeapon( $"melee_vctblue" )
	
	// Habilidades
	PrecacheWeapon( $"mp_ability_phase_chamber" )
	PrecacheWeapon( $"mp_weapon_ringflare" )
	PrecacheWeapon( $"mp_ability_phase_rewind" )
	PrecacheWeapon( $"mp_weapon_turret" )
	PrecacheWeapon( $"npc_weapon_turret_volt" )
	PrecacheWeapon( $"mp_ability_space_elevator_tac" )
	PrecacheModel( $"mdl/Weapons/ptpov_horizon_heirloom/ptpov_horizon_heirloom.rmdl" )
	
	switch( GameRules_GetGameMode() )
	{
		case CUSTOM_CTF:
			PrecacheWeapon( $"melee_flagpole" )
			PrecacheWeapon( $"mp_weapon_flagpole_primary" )
			break
		case fs_prophunt:
			PrecacheWeapon( $"mp_weapon_flashbang_fakeultimate" )
			PrecacheWeapon( $"mp_weapon_changeprops_fakeultimate" )
			break
		case "flowstate_pkknockback":
			PrecacheWeapon( $"mp_ability_selfpushback" )
			break
		case fs_dm:
		case fs_aimtrainer:
		default:		
			break
	}

	// Custom Player Models
	PrecacheModel( $"mdl/Humans/pilots/w_amogino.rmdl" ) // Amogus
	
	PrecacheModel( $"mdl/Humans/pilots/w_phantom.rmdl" ) // Apex Mobile Fade
	PrecacheModel( $"mdl/Humans/pilots/ptpov_phantom.rmdl" )
	
	PrecacheModel( $"mdl/Humans/pilots/w_rhapsody.rmdl" ) // Apex Mobile Rhapsody
	PrecacheModel( $"mdl/Humans/pilots/ptpov_rhapsody.rmdl" )
	
	PrecacheModel( $"mdl/flowstate_custom/ptpov_pete_mri.rmdl" ) // Pete mri
	PrecacheModel( $"mdl/flowstate_custom/w_pete_mri.rmdl" )
	
	PrecacheModel( $"mdl/Humans/pilots/w_agent.rmdl" ) // Splinter Cell Agent
	PrecacheModel( $"mdl/Humans/pilots/ptpov_agent.rmdl" )
	
	PrecacheModel( $"mdl/Humans/pilots/w_nickmercs_hodded.rmdl" ) // Nickmercs hodded
	PrecacheModel( $"mdl/Humans/pilots/ptpov_nickmercs_hodded.rmdl" )
	
	PrecacheModel( $"mdl/flowstate_custom/charm_nickmercs.rmdl" ) // Nickmercs Charm
	
	if( GetCurrentPlaylistVarBool( "enable_oddball_gamemode", false ) )
	{
		PrecacheWeapon( $"mp_weapon_oddball_primary" )
		PrecacheWeapon( $"melee_oddball" )
	}
		
	RegisterSignal( "VCTBlueFX" )
	
	// Init weapons
	InitFlowstateWeapons()
	
	//Server only init for flowstate gamemodes
	switch( GetCurrentPlaylistName() )
	{
		case "fs_onlyup":
		OnlyUp_Init()
		break

		case "fs_nextbots":
		MpNextBots_Init()
		break
		
		case "fs_fallingforever":
		InitFallingForever()
		break
		
		case "fs_doormovementpractice":
		door_map_init()
		break
		
		case "fs_grapplemovementpractice":
		grapplemap_init()
		break
		
		case "fs_mantlejumppractice":
		mantlejumpmap_init()
		break

		case "fs_firstmovementmappractice":
		Firstmap_init()
		break

		case "fs_gymmovementmappractice":
		Gymmovementmap_init()
		break

		case "fs_ithurtsmovementmappractice":
		ithurtsmap_init()
		break

		case "fs_strafeitmovementmappractice":
		strafeitmap_init()
		break

		
		case "fs_lgduels_1v1":
			
			PrecacheModel( $"mdl/thunderdome/thunderdome_cage_wall_256x256_01.rmdl" )
			PrecacheModel( $"mdl/imc_base/generator_IMC_01.rmdl" )
			PrecacheModel( $"mdl/containers/underbelly_cargo_container_128_red_02.rmdl" )
			PrecacheModel( $"mdl/containers/underbelly_cargo_container_128_blue_02.rmdl" )
		
		
		case "fs_1v1":
		
		if( !InvalidModesForTrackScoreBoard.contains( GameRules_GetGameMode() ) ) //prevent mapchange crash
			thread FS_TrackPlayersPositionInScoreboard()
		break

		case "fs_rankupmapmovementpractice":
		rankupmap_init()
		break
	}
}

void function FS_OnClientConnected( entity player )
{
	if( !IsValid( player ) )
		return
	
	//Phase Rewind Record Positions
	thread RecordPositions( player )

	//Record a networked int for Latency to show in scoreboard
	thread NetworkedIntLatencyThingy( player )
}

void function NetworkedIntLatencyThingy( entity player ) //(mk): 11/12/2024 - thingified it 
{
	if( !IsValid( player ) ) //was threaded off, check again.
		return 
		
	player.EndSignal( "OnDestroy" )
	
	int latency
	
	for( ; ; )
	{
		latency = int( player.GetLatency() * 1000 ) - 45	
		
		player.SetPlayerNetInt( "latency", ClampInt( latency, -1, 500 ) )
		
		wait 0.5
	}
}

bool function ClientCommand_DonateToCafe( entity player, array<string> argList )
{
	Remote_CallFunction_UI( player, "FS_SupportCafe" )
	return true
}

void function FS_TrackPlayersPositionInScoreboard()
{
	array<entity> players

	while( true )
	{
		players = GetPlayerArray()
		players.sort( CompareKills )

		int i = 1
		foreach( sPlayer in players )
		{
			if( !IsValid( sPlayer ) )
				continue
			
			if( i != sPlayer.GetPlayerNetInt( "FSDM_1v1_PositionInScoreboard" ) )
				sPlayer.SetPlayerNetInt( "FSDM_1v1_PositionInScoreboard", i )

			i++
		}
		
		wait 1
	}
}

void function DEV_GetPropAtCrosshair()
{
    entity player = gp()[0]
    vector eyePos = player.EyePosition()
    vector pos = GetPlayerCrosshairOrigin( player )
	
    vector dir = player.GetViewForward()
    TraceResults result = TraceLine( eyePos, pos + ( dir * 100 ), [ player ], TRACE_MASK_SOLID, TRACE_COLLISION_GROUP_NONE )
	
    if ( IsValid( result.hitEnt ) )
    {
        printw( "LOOKING AT: " + result.hitEnt.GetModelName() )
        // Get bounding box
        vector mins = result.hitEnt.GetBoundingMins()
        vector maxs = result.hitEnt.GetBoundingMaxs()
		
        // Calculate dimensions
        float width = maxs.x - mins.x
        float depth = maxs.y - mins.y
        float height = maxs.z - mins.z
        printw( "DIMENSIONS: " + width + " x " + depth + " x " + height + " units" )
        // printw( "BOUNDING BOX: mins=" + mins + " maxs=" + maxs )
    }
}

void function FS_InitCommunityHeirlooms()
{
	// Disabled until we figure out which one crash the client
	
	file.heirlooms.append( CreateHeirloom( "melee_pilot_emptyhanded", "mp_weapon_melee_survival" ) )
	file.heirlooms.append( CreateHeirloom( "melee_pilot_emptyhanded", "mp_weapon_melee_survival" ) )
	file.heirlooms.append( CreateHeirloom( "melee_pilot_emptyhanded", "mp_weapon_melee_survival" ) )
	file.heirlooms.append( CreateHeirloom( "melee_pilot_emptyhanded", "mp_weapon_melee_survival" ) )
	file.heirlooms.append( CreateHeirloom( "melee_pilot_emptyhanded", "mp_weapon_melee_survival" ) )
	file.heirlooms.append( CreateHeirloom( "melee_pilot_emptyhanded", "mp_weapon_melee_survival" ) )
	// Loaded only with common kral rpak
	
	// file.heirlooms.append( CreateHeirloom( "melee_bolo_sword", "mp_weapon_bolo_sword_primary" ) )
	// file.heirlooms.append( CreateHeirloom( "melee_karambit", "mp_weapon_karambit_primary" ) )
	// file.heirlooms.append( CreateHeirloom( "melee_mc_sword", "mp_weapon_mc_sword_primary" ) )
	// file.heirlooms.append( CreateHeirloom( "melee_mjolnir", "mp_weapon_mjolnir_primary" ) )
	// file.heirlooms.append( CreateHeirloom( "melee_macks_knife", "mp_weapon_macks_knife_primary" ) )
}

Heirloom function CreateHeirloom( string melee, string primary )
{
	Heirloom heirloom
	heirloom.melee = melee
	heirloom.primary = primary
	
	return heirloom
}

array<Heirloom> function GetCommunityHeirlooms()
{
	return file.heirlooms
}

#endif

 // ██████╗██╗     ██╗███████╗███╗   ██╗████████╗    ██╗███╗   ██╗██╗████████╗
// ██╔════╝██║     ██║██╔════╝████╗  ██║╚══██╔══╝    ██║████╗  ██║██║╚══██╔══╝
// ██║     ██║     ██║█████╗  ██╔██╗ ██║   ██║       ██║██╔██╗ ██║██║   ██║   
// ██║     ██║     ██║██╔══╝  ██║╚██╗██║   ██║       ██║██║╚██╗██║██║   ██║   
// ╚██████╗███████╗██║███████╗██║ ╚████║   ██║       ██║██║ ╚████║██║   ██║   
 // ╚═════╝╚══════╝╚═╝╚══════╝╚═╝  ╚═══╝   ╚═╝       ╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝   

#if CLIENT
void function ClientCodeCallback_Flowstate_ModInit()
{
	HAS_FLOWSTATE_MOD = true
	
	RegisterSignal( "VCTBlueFX" )
	
	// Gamemodes
	RegisterFlowstateGamemodes()
	
	// Remote functions
	RegisterFlowstateRemoteFunctions()
	
	// Init weapons
	InitFlowstateWeapons()

	//Client only init for flowstate playlists
	
	//todo(cafe): have to wait for entitiesdidload flag i think
	switch( GetCurrentPlaylistName() )
	{
		case "fs_nextbots":
		MpNextBots_Init()
		break
	}

	ModCallbacks_RegisterVoidCallback("StartUpdatingArmorSwapLastTime", void function() {
		StartUpdatingArmorSwapLastTime()
	})	
}

void function TestExternalRemoteFunct()
{
	printw( "TestExternalRemoteFunct WORKS" )
}

#endif


// ██╗   ██╗██╗    ██╗███╗   ██╗██╗████████╗
// ██║   ██║██║    ██║████╗  ██║██║╚══██╔══╝
// ██║   ██║██║    ██║██╔██╗ ██║██║   ██║   
// ██║   ██║██║    ██║██║╚██╗██║██║   ██║   
// ╚██████╔╝██║    ██║██║ ╚████║██║   ██║   
 // ╚═════╝ ╚═╝    ╚═╝╚═╝  ╚═══╝╚═╝   ╚═╝   

#if UI
void function UICodeCallback_Flowstate_ModInit()
{
	HAS_FLOWSTATE_MOD = true
	
	AddUICallback_OnLevelInit( FS_OnLeveLInit )
	AddUICallback_OnDevMenuLoaded( FS_OnDevMenuLoaded )
	AddUICallback_OnInitMenus( RegisterMenus )

	// Gamemodes
	RegisterFlowstateGamemodes()
}

void function FS_OnLeveLInit()
{
	if( IsConnected() )
		UICodeCallback_Flowstate_ModInit() // Reset UI flowstate var so dev menu is updated properly when changing level from a non flowstate playlist
}

void function FS_SupportCafe()
{
	LaunchExternalWebBrowser( "https://ko-fi.com/r5r_colombia", WEBBROWSER_FLAG_NONE )
}

void function RegisterMenus()
{
	//Settings
	AddMenu( "FRLGDuelsSettings", $"scripts/resource/ui/menus/FRChallenges/flowstate_lgduels_settings.menu", InitLGDuelsSettings )
	// AddMenu( "ValkSimulatorSettings", $"scripts/resource/ui/menus/FRChallenges/flowstate_valksimulator_settings.menu", InitValkSimulatorSettings )

	//Flowstate Aim Trainer
	//Main Menu
	AddMenu( "FRChallengesMainMenu", $"scripts/resource/ui/menus/FRChallenges/mainmenu_main.menu", InitFRChallengesMainMenu )
	
	//Settings
	AddMenu( "FRChallengesSettings", $"scripts/resource/ui/menus/FRChallenges/mainmenu_settings.menu", InitFRChallengesSettings )
	
	//History
	AddMenu( "FRChallengesHistory", $"scripts/resource/ui/menus/FRChallenges/mainmenu_history.menu", InitChallengesHistory )
	
	//Weapon Selector
	var weaponselector = AddMenu( "FRChallengesSettingsWpnSelector", $"scripts/resource/ui/menus/FRChallenges/mainmenu_settings_weaponselector.menu", InitFRChallengesSettingsWpnSelector )
	AddPanel( weaponselector, "BuyMenu1", InitArenasBuyPanel1 )
	AddPanel( weaponselector, "BuyMenu2", InitArenasBuyPanel2 )
	AddPanel( weaponselector, "BuyMenu3", InitArenasBuyPanel3 )
	AddPanel( weaponselector, "BuyMenu4", InitArenasBuyPanel4 )
	AddPanel( weaponselector, "BuyMenu5", InitArenasBuyPanel5 )
	
	//results
	AddMenu( "FRChallengesMenu", $"scripts/resource/ui/menus/FRChallenges/challenges_results.menu", InitFRChallengesResultsMenu ) //results

	//Custom msgs to chat box
	AddMenu( "FS_ServerMsgs_To_ChatBox", $"scripts/resource/ui/menus/FlowstateDM/flowstate_msgs_to_chatbox.menu", InitServerMSGSToChatBox )

	//FLOWSTATE DM
	//Statistics
	AddMenu( "StatisticsUI", $"scripts/resource/ui/menus/FlowstateDM/flowstate_statistics.menu", InitStatisticsUI )
	AddMenu( "FSDMVoteMenu", $"scripts/resource/ui/menus/FlowstateDM/flowstate_menu_vote.menu", Init_FSDM_VoteMenu )
	
	AddMenu( "FSVoteTeamMenu", $"scripts/resource/ui/menus/FlowstateDM/flowstate_menu_voteteam.menu", Init_FS_VoteTeamMenu )//Halo mod and others probably

	AddMenu( "FSProphuntScoreboardMenu", $"scripts/resource/ui/menus/FlowstateDM/flowstate_prophunt_scoreboard.menu", Init_FSDM_ProphuntScoreboardMenu )
	
	//FLOWSTATE MOVEMENT GYM
	//Settings
	AddMenu( "MGSettingsMenu", $"scripts/resource/ui/menus/MovementGym/movementgym_settings.menu", InitMGSettings )

	//FLOWSTATE SND
	//Buy Menu
	AddMenu( "FSSND_BuyMenu", $"scripts/resource/ui/menus/FlowstateSND/flowstate_snd_buy_menu.menu", Init_FSSND_BuyMenu )
	
	//FLOWSTATE SPIES LEGENDS
	//Gadgets Selector
	var gadgetsselector = AddMenu( "Spies_GadgetsSelector", $"scripts/resource/ui/menus/SpiesLegends/gadgetsselector.menu", Init_GadgetsSelector )
	
	//FLOWSTATE 1v1
	var fs1v1_SettingsMenu = AddMenu( "1v1_SetttingsMenu", $"scripts/resource/ui/menus/fs_1v1/settings.menu", Init_1v1_SettingsMenu )

	AddMenu( "ScenariosStandingsMenu", $"scripts/resource/ui/menus/FlowstateScenarios/fs_scenarios.menu", InitScenariosMenu, "Match Standings" )
	
	//Coaching menu
	var coachingMenu = AddMenu( "1v1CoachingModeMenu", $"scripts/resource/ui/menus/FS_1v1_Coaching/fs_1v1_coaching.menu", InitCoachingMenu, "1v1 Coaching" )
	AddPanel( coachingMenu, "CoachingRecordingsList", Init_CoachingRecordingsList )
	
}

void function OpenRecordingsMenu()
{
	UI_Open1v1CoachingMenu()
}

// ██████╗ ███████╗██╗   ██╗    ███╗   ███╗███████╗███╗   ██╗██╗   ██╗
// ██╔══██╗██╔════╝██║   ██║    ████╗ ████║██╔════╝████╗  ██║██║   ██║
// ██║  ██║█████╗  ██║   ██║    ██╔████╔██║█████╗  ██╔██╗ ██║██║   ██║
// ██║  ██║██╔══╝  ╚██╗ ██╔╝    ██║╚██╔╝██║██╔══╝  ██║╚██╗██║██║   ██║
// ██████╔╝███████╗ ╚████╔╝     ██║ ╚═╝ ██║███████╗██║ ╚████║╚██████╔╝
// ╚═════╝ ╚══════╝  ╚═══╝      ╚═╝     ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝ 

void function FS_OnDevMenuLoaded()
{
	if( GetCheatsState() )
	{
		SetupDevMenu( "Flowstate Mod by @CafeFPS", SetDevMenu_FlowstateMod )
	}
}

void function SetDevMenu_FlowstateMod( var _ )
{
	thread ChangeToThisMenu( SetupFlowstateModMenu )
}

void function SetDevMenu_FlowstatePlayerModels( var _ )
{
	thread ChangeToThisMenu( SetupFlowstatePlayerModels )
}

void function SetDevMenu_FlowstateAbilities( var _ )
{
	thread ChangeToThisMenu( SetupFlowstateAbilities )
}

void function SetDevMenu_FlowstateWeapons( var _ )
{
	thread ChangeToThisMenu( SetupFlowstateWeapons )
}

void function SetDevMenu_FlowstateHeirlooms( var _ )
{
	thread ChangeToThisMenu( SetupFlowstateHeirlooms )
}

void function SetupFlowstateModMenu()
{
	SetupDevMenu( "Player Models", SetDevMenu_FlowstatePlayerModels )
	SetupDevMenu( "Abilities", SetDevMenu_FlowstateAbilities )
	SetupDevMenu( "Weapons", SetDevMenu_FlowstateWeapons )
	SetupDevMenu( "Heirlooms", SetDevMenu_FlowstateHeirlooms )
}

void function SetupFlowstatePlayerModels()
{
	SetupDevCommand( "Fade", "blank" )
	SetupDevCommand( "Rhapsody", "blank" )
	// SetupDevCommand( "Blisk", "blank" )
	// SetupDevCommand( "Ash OG", "blank" )
	// SetupDevCommand( "Jack Cooper", "blank" )
	// SetupDevCommand( "Loba Swimsuit", "blank" )
	SetupDevCommand( "", "blank" )
	
	SetupDevCommand( "SC Agent", "blank" )
	SetupDevCommand( "Pete Mri", "blank" )
	// SetupDevCommand( "Naruto", "blank" )
	// SetupDevCommand( "Gojo", "blank" )
	SetupDevCommand( "Amogus", "blank" )
	// SetupDevCommand( "Marvin", "blank" )
	// SetupDevCommand( "CJ", "blank" )
	// SetupDevCommand( "Peter Griffing", "blank" )
	// SetupDevCommand( "Master Chief", "blank" )

	
	
	SetupDevCommand( "", "blank" )
	SetupDevCommand( "", "blank" )
	
	
	SetupDevCommand( "Support my work - Click to donate", "donatetocafe")
}

void function SetupFlowstateAbilities()
{
	SetupDevCommand( "Gravity Lift", "give mp_ability_space_elevator_tac" )
	SetupDevCommand( "Phase Rewind", "give mp_ability_phase_rewind" )
	SetupDevCommand( "Phase Chamber", "give mp_ability_phase_chamber")
	SetupDevCommand( "Suppressor Turret", "give mp_weapon_turret")
	SetupDevCommand( "Ring Flare", "give mp_weapon_ringflare")
	
	SetupDevCommand( "", "blank" )
	SetupDevCommand( "", "blank" )
	SetupDevCommand( "Support my work - Click to donate", "donatetocafe")
}

void function SetupFlowstateWeapons()
{
	SetupDevCommand( "Raygun", "give mp_weapon_raygun")
	SetupDevCommand( "Lightning Gun", "give mp_weapon_lightninggun")
	SetupDevCommand( "Flame Thrower", "give mp_weapon_flamethrower")
	// SetupDevCommand( "Flowstate Sword", "give mp_weapon_titan_sword")
	// SetupDevCommand( "Guided Missile Launcher (todo)", "blank")
	// SetupDevCommand( "Heatwave (todo)", "blank")
	// SetupDevCommand( "Portal Gun (todo)", "blank")
	// SetupDevCommand( "Energy Sword (todo)", "blank")
	// SetupDevCommand( "Nessy97 (todo)", "blank")

	SetupDevCommand( "", "blank" )
	SetupDevCommand( "", "blank" )
	SetupDevCommand( "Support my work - Click to donate", "donatetocafe")
}

void function SetupFlowstateHeirlooms()
{
	SetupDevCommand( "VCT Blue", "giveheirloom 5" ) //todo(cafe): create own flowstate giveheirloom funct
	// SetupDevCommand( "Paracord Knife (todo)", "blank")
	// SetupDevCommand( "Lightsaber (todo)", "blank")
	
	SetupDevCommand( "", "blank" )
	SetupDevCommand( "", "blank" )
	SetupDevCommand( "Support my work - Click to donate", "donatetocafe")
}

// Survival Stuff
	//Red Shield
	//Bomb
// FS Grenades
	//Decoy Grenade
	//Impulse Grenade
// FS Hopups
#endif